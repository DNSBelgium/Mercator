services:

  localstack:
    image: localstack/localstack:0.14.0
    mem_limit: 500M
    ports:
      - "4566:4566" # edge port
      - "9009:8080" # management web interface
    environment:
      - SERVICES=sqs,s3
      - AWS_ACCESS_KEY_ID=accessKey
      - AWS_SECRET_ACCESS_KEY=secretKey
      - HOSTNAME_EXTERNAL=${LOCALSTACK_HOSTNAME:-localstack}
      - DATA_DIR=/tmp/localstack/data
      - HOST_TMP_FOLDER=${PWD}/localstack/scripts/
    healthcheck:
      test: curl -f http://localhost:4566/health || exit 1
      interval: 10s
      timeout: 5s
      retries: 5
    volumes:
      - ${PWD}/localstack/scripts/:/docker-entrypoint-initaws.d:ro
      #- ${PWD}/localstack/container/:/tmp/localstack

  s3-proxy:
    image: pottava/s3-proxy
    mem_limit: 50M
    ports:
      - 8081:80
    environment:
      - AWS_API_ENDPOINT=http://localstack:4566
      - AWS_REGION=eu-west-1
      - AWS_ACCESS_KEY_ID=accessKey
      - AWS_SECRET_ACCESS_KEY=secretKey
      - AWS_S3_BUCKET=mercator-muppets
      - ACCESS_LOG=true
      - DIRECTORY_LISTINGS=true
      - DIRECTORY_LISTINGS_FORMAT=html
      - GET_ALL_PAGES_IN_DIR=true
      - HEALTHCHECK_PATH=/health
      - CORS_ALLOW_ORIGIN=*
      - CORS_ALLOW_METHODS=GET,FETCH,OPTIONS,HEAD
      - CORS_ALLOW_HEADERS="*"
      - CORS_MAX_AGE=600
    container_name: s3-proxy

  muppets:
    build:
      context: ./muppets
    image: dnsbelgium/mercator/muppets:local
    ports:
      - "8085:8080"
    mem_limit: 500M
    cap_add:
      - SYS_ADMIN
    environment:
      - S3_ENDPOINT=http://localstack:4566
      - SQS_ENDPOINT=http://localstack:4566
      - AWS_ACCESS_KEY_ID=accessKey
      - AWS_SECRET_ACCESS_KEY=secretKey
      - AWS_REGION=eu-west-1
      - SERVER_PORT=8080
      - MAX_CONTENT_LENGTH=10485760
    depends_on:
      localstack:
        condition: service_healthy
    healthcheck:
      test: rm -f health && wget -q 127.0.0.11:8080/health && grep -q OK health
      interval: 10s
      timeout: 5s
      retries: 3
    restart: always # since the process stops listening for messages on network issues, we need to restart it

  mercator-wappalyzer:
    build:
      context: ./mercator-wappalyzer
    image: dnsbelgium/mercator/mercator-wappalyzer:local
    ports:
      - "8087:8080"
    mem_limit: 500M
    cap_add:
      - SYS_ADMIN
    environment:
      - AWS_ACCESS_KEY_ID=accessKey
      - AWS_SECRET_ACCESS_KEY=secretKey
      - AWS_REGION=eu-west-1
      - SQS_ENDPOINT=http://localstack:4566
      - SQS_INPUT_QUEUE=mercator-wappalyzer-input
      - SQS_OUTPUT_QUEUE=mercator-wappalyzer-output
      - SERVER_PORT=8087
    depends_on:
      localstack:
        condition: service_healthy
    healthcheck:
      test: rm -f health && wget -q 127.0.0.11:8087/health && grep OK health
      interval: 5s
      timeout: 5s
      retries: 5
    restart: always # since the process stops listening for messages on network issues, we need to restart it

  db:
    image: postgres:11.10
    command: "-c max_connections=500"
    ports:
      - "5432:5432"
    environment:
      - POSTGRES_DB=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_PASSWORD=password

  #  prometheus:
  #    image: prom/prometheus:v2.12.0
  #    command: '--config.file=/etc/prometheus/prometheus.yml'
  #    volumes:
  #      - ${PWD}/observability/prometheus/prometheus_crawler_local.yml:/etc/prometheus/prometheus.yml
  #      - ${PWD}/observability/prometheus/sd:/etc/prometheus/sd
  #    ports:
  #      - "9090:9090"

  #  grafana:
  #    environment:
  #      GF_SECURITY_ADMIN_PASSWORD: password
  #    image: grafana/grafana:6.5.2
  #    volumes:
  #      - ${PWD}/observability/grafana/provisioning/:/etc/grafana/provisioning/
  #      - ${PWD}/observability/infra/modules/observability/templates/grafana-dashboards/:/var/lib/grafana/dashboards/
  #      - ${PWD}/observability/grafana/persistence/grafana.db:/etc/grafana/grafana.db
  #    ports:
  #      - "3000:3000"

  dispatcher:
    image: dnsbelgium/mercator/dispatcher:local
    mem_limit: 250M
    ports:
      - "8086:8086"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=dispatcher
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
    depends_on:
      db:
        condition: service_started
      localstack:
        condition: service_healthy
    healthcheck:
      test: "rm -f health && wget -q localhost:8086/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  dns-crawler:
    image: dnsbelgium/mercator/dns-crawler:local
    mem_limit: 250M
    ports:
      - "8082:8082"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=dns_crawler
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
      - GEO_IP_MAXMIND_LICENSE_KEY=${MAXMIND_LICENSE_KEY}
    depends_on:
      db:
        condition: service_started
      localstack:
        condition: service_healthy
    healthcheck:
      test: "rm -f health && wget -q localhost:8082/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  content-crawler:
    image: dnsbelgium/mercator/content-crawler:local
    mem_limit: 300M
    ports:
      - "8084:8084"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=content_crawler
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_started
    healthcheck:
      test: "rm -f health && wget -q localhost:8084/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  smtp-crawler:
    image: dnsbelgium/mercator/smtp-crawler:local
    mem_limit: 300M
    ports:
      - "8083:8083"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=smtp_crawler
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
      - GEO_IP_MAXMIND_LICENSE_KEY=${MAXMIND_LICENSE_KEY}
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_started
    healthcheck:
      test: "rm -f health && wget -q localhost:8083/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  feature-extraction:
    image: dnsbelgium/mercator/feature-extraction:local
    mem_limit: 300M
    ports:
      - "8088:8088"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=feature_extraction
      - SPRING_DATASOURCE_CONTENT_URL=jdbc:postgresql://db:5432/postgres?currentSchema=content_crawler
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
      - S3_ENDPOINT=http://localstack:4566
      - AWS_REGION=eu-west-1
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_started
    healthcheck:
      test: "rm -f health && wget -q localhost:8088/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  vat-crawler:
    image: dnsbelgium/mercator/vat-crawler:local
    mem_limit: 300M
    ports:
      - "8091:8091"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=vat_crawler
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
      - AWS_REGION=eu-west-1
      - management.health.probes.enabled=true
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_started
    healthcheck:
      test: "rm -f health && wget -q localhost:8091/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  tls-crawler:
    image: dnsbelgium/mercator/tls-crawler:local
    mem_limit: 300M
    ports:
      - "8092:8092"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=tls_crawler
      - SPRING_PROFILES_ACTIVE=local
      - LOCALSTACK_URL=http://localstack:4566
      - AWS_REGION=eu-west-1
    depends_on:
      localstack:
        condition: service_healthy
      db:
        condition: service_started
    healthcheck:
      test: "rm -f health && wget -q localhost:8092/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  api:
    image: dnsbelgium/mercator/mercator-api:local
    ports:
      - "8089:8089"
    environment:
      - SPRING_PROFILES_ACTIVE=local
      - SPRING_DATASOURCE_DISPATCHER_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=dispatcher
      - SPRING_DATASOURCE_CONTENT_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=content_crawler
      - SPRING_DATASOURCE_DNS_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=dns_crawler
      - SPRING_DATASOURCE_SMTP_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=smtp_crawler
      - SPRING_DATASOURCE_FEATURE_EXTRACTION_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=feature_extraction
      - SPRING_DATASOURCE_VAT_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=vat_crawler
      - SPRING_DATASOURCE_TLS_JDBC_URL=jdbc:postgresql://db:5432/postgres?currentSchema=tls_crawler
    depends_on:
      db:
        condition: service_started
    healthcheck:
      test: "rm -f health && wget -q localhost:8089/actuator/health && grep UP health > /dev/null"
      interval: 5s
      timeout: 3s
      retries: 5
      start_period: 5s

  ui:
    image: dnsbelgium/mercator/mercator-ui:local
    build:
      context: ./mercator-ui
    ports:
      - "8090:8080"
    environment:
      - MERCATOR_API_SCHEME=http
      - MERCATOR_API_HOST=api
      - MERCATOR_API_PORT=8089
      - REACT_APP_MUPPETS_HOST=http://localhost:8080
    depends_on:
      api:
        condition: service_started

  ground-truth:
    image: dnsbelgium/mercator/ground-truth:local
    ports:
      - "8094:8080"
    environment:
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/postgres?currentSchema=ground_truth
      - SPRING_PROFILES_ACTIVE=local
    depends_on:
      db:
        condition: service_started

  s3proxyproxy:
    image: nginx:1-alpine
    ports:
      - "8080:80"
    volumes:
      - ./muppets/nginx.dev.conf:/etc/nginx/nginx.conf:ro

