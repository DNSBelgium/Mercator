plugins {
    id 'org.springframework.boot'
    id 'io.spring.dependency-management'
    id 'com.google.cloud.tools.jib'
    id 'java'
    id 'org.unbroken-dome.helm'
}

version = '0.0.1-' + getCommitHash()

repositories {
    mavenCentral()
}

dependencyManagement {
    imports {
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
    }
}

dependencies {

    // EKS IRSA support
    implementation 'com.amazonaws:aws-java-sdk-sts'

    implementation project(':common-messaging')
    implementation project(':common-messaging-aws')
    implementation project(':common-geoip')

    implementation project(':tls-crawler-persistence')

    implementation 'org.springframework.boot:spring-boot-starter-actuator'
    implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'io.micrometer:micrometer-registry-prometheus'

    // https://mvnrepository.com/artifact/io.netty/netty-transport
    implementation group: 'io.netty', name: 'netty-transport'
    implementation group: 'io.netty', name: 'netty-codec'
    implementation group: 'io.netty', name: 'netty-handler'

    // https://mvnrepository.com/artifact/commons-codec/commons-codec
    // For now we only use it for encoding byte arrays to Hexadecimal strings
    // (use this instead of bouncycastle which is 15x bigger)
    implementation group: 'commons-codec', name: 'commons-codec'

    // https://mvnrepository.com/artifact/commons-net/commons-net
    implementation group: 'commons-net', name: 'commons-net', version: '3.8.0'

    // https://mvnrepository.com/artifact/com.github.seancfoley/ipaddress
    implementation group: 'com.github.seancfoley', name: 'ipaddress', version: '5.3.4'

    // JSON logging
    implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

    implementation 'org.springframework.integration:spring-integration-core'
    implementation 'com.fasterxml.jackson.core:jackson-databind'

    // explicitly declare a dependency on aws-java-sdk-core
    // otherwise we could get an older version in our classpath via common-messaging
    // seems to be an issue only when running from IntelliJ
    implementation 'com.amazonaws:aws-java-sdk-core'

    // DB
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.flywaydb:flyway-core'
    runtimeOnly 'org.postgresql:postgresql'

    // https://mvnrepository.com/artifact/org.hibernate/hibernate-jcache
    implementation group: 'org.hibernate', name: 'hibernate-jcache'

    // https://mvnrepository.com/artifact/org.ehcache/ehcache
    implementation group: 'org.ehcache', name: 'ehcache'

    // https://mvnrepository.com/artifact/javax.cache/cache-api
    implementation group: 'javax.cache', name: 'cache-api'

    // Lombok
    compileOnly 'org.projectlombok:lombok'
    annotationProcessor 'org.projectlombok:lombok'

    // https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
    implementation 'org.apache.commons:commons-lang3'

    // used by RateLimiter
    implementation 'com.github.ben-manes.caffeine:caffeine:3.1.1'

    annotationProcessor "org.springframework.boot:spring-boot-configuration-processor"

    testImplementation 'org.springframework.boot:spring-boot-starter-test'
    testImplementation testFixtures(project(':common-testing'))
}

jib {
    container {
        jvmFlags = ['-XX:MaxRAMPercentage=75.0']
    }
}

test {
    useJUnitPlatform()
}

