plugins {
  id 'org.springframework.boot'
  id 'io.spring.dependency-management'
  id 'com.google.cloud.tools.jib'
  id 'java'
  id 'org.unbroken-dome.helm'
}

version = '0.0.1-' + getCommitHash()

repositories {
  mavenCentral()
}

test {
  useJUnitPlatform()
}

dependencyManagement {
  imports {
    mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
  }
}

dependencies {
  // EKS IRSA support
  implementation 'com.amazonaws:aws-java-sdk-sts'
  implementation project(':common-messaging')
  implementation project(':content-crawler-dto')
  implementation project(':content-crawler-persistence')

  implementation 'org.springframework.boot:spring-boot-starter-actuator'
  implementation 'org.springframework.boot:spring-boot-starter-web'
  implementation 'io.micrometer:micrometer-registry-prometheus'

  // JSON logging
  implementation "net.logstash.logback:logstash-logback-encoder:${logstashLogbackEncoderVersion}"

  implementation 'org.springframework.integration:spring-integration-core'
  implementation 'com.fasterxml.jackson.core:jackson-databind'

  // explicitly declare a dependency on aws-java-sdk-core
  // otherwise we could get an older version in our classpath via common-messaging
  // seems to be an issue only when running from IntelliJ
  implementation 'com.amazonaws:aws-java-sdk-core'

  // DB
  implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
  implementation 'org.flywaydb:flyway-core'
  runtimeOnly 'org.postgresql:postgresql'
  // JSONB support
  implementation 'com.vladmihalcea:hibernate-types-52:2.9.7'

  // Lombok
  compileOnly 'org.projectlombok:lombok'
  annotationProcessor 'org.projectlombok:lombok'

  implementation 'org.apache.commons:commons-lang3'

  testImplementation('org.springframework.boot:spring-boot-starter-test') {
    exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
  }
  testImplementation testFixtures(project(':common-testing'))
}

jib {
  container {
    jvmFlags = ['-XX:MaxRAMPercentage=75.0']
  }
}
