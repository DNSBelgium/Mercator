plugins {
  id "org.owasp.dependencycheck" version "9.2.0"
  id 'com.google.cloud.tools.jib' version '3.2.1' apply false
  id 'com.citi.helm' version '2.2.0' apply false
  id 'org.springframework.boot' version '2.7.11' apply false
  id 'io.spring.dependency-management' version '1.0.11.RELEASE' apply false
  id 'org.barfuin.gradle.taskinfo' version '2.2.0' apply false
}

group = 'be.dnsbelgium'

dependencyCheck {
  formats = ['XML', 'JUNIT', 'HTML']
  analyzers {
    assemblyEnabled = false
    nodeEnabled = false
    nodeAuditEnabled = false
    nodeAudit {
      yarnEnabled = false
    }
  }
}

ext['springCloudAwsVersion']="2.4.1"
ext['logstashLogbackEncoderVersion']="7.2"
ext['aws-java-sdk.version']="1.12.262"
ext['postgresql.version']="42.4.1"

// CVE-2022-25857
ext['snakeyaml.version']="1.33"

ext {
  getCommitHash = { ->
    def stdout = new ByteArrayOutputStream()
    exec {
      commandLine 'git', 'rev-parse', '--short', 'HEAD'
      standardOutput = stdout
    }
    return stdout.toString().trim()
  }
}

evaluationDependsOnChildren()
subprojects { subproject ->

  tasks.withType(AbstractArchiveTask).configureEach {
    preserveFileTimestamps = false
    reproducibleFileOrder = true
  }

  pluginManager.withPlugin("java") {
    sourceCompatibility = JavaVersion.VERSION_17

    dependencyManagement {
      imports {
        mavenBom "io.awspring.cloud:spring-cloud-aws-dependencies:${springCloudAwsVersion}"
      }
    }

  }

  pluginManager.withPlugin("com.google.cloud.tools.jib") {
    def registry = ""
    def tagList = [getCommitHash()]
    if (project.hasProperty("dockerRegistry")) {
      registry = project.getProperty("dockerRegistry")
    } else {
      tagList += ["local"] // If registry is empty, we had the local tag.
    }
    if (project.hasProperty("dockerTags")) {
      project.getProperty('dockerTags').split(',').each {
        tagList += [it]
      }
    }
    jib {
      to {
        image = "${registry}dnsbelgium/mercator/${subproject.name}:${subproject.version}"
        tags = tagList
      }
      from {
        image = "docker://dnsbelgium/mercator/docker-base-image:${project(":docker-base-image").getVersion()}"
      }
    }

    tasks.register('dockerBuildAndPush') {
      dependsOn ':docker-base-image:docker'
      dependsOn tasks.jib
      tasks.findByName('jib').mustRunAfter ':docker-base-image:docker'
    }

    tasks.register('dockerBuild') {
      dependsOn ':docker-base-image:docker'
      dependsOn tasks.jibDockerBuild
      tasks.findByName('jibDockerBuild').mustRunAfter ':docker-base-image:docker'
    }
  }

  pluginManager.withPlugin("com.citi.helm") {
    helm {
      lint {
        // treat linter warnings as errors (failing the build)
        strict = false
      }
    }

    tasks.register('helmPublish', Exec) {
      def registry = ""
      if (project.hasProperty("helmRegistry")) {
        registry = project.getProperty("helmRegistry")
      }

      executable 'sh'
      args '-c', "helm push build/helm/charts/${subproject.name}-${subproject.version}.tgz ${registry}"
    }
    tasks.findByName('helmPublish').dependsOn(tasks.findByName('helmPackageMainChart'))
    tasks.findByName('helmPublish').mustRunAfter(tasks.findByName('helmPackageMainChart'))
  }
}
